const express = require('express');
const bcrypt = require('bcryptjs');
const { check } = require('express-validator');

const { handleValidationErrors } = require('../../utils/validation');
const { setTokenCookie, requireAuth } = require('../../utils/auth');
const { User } = require('../../db/models');

const router = express.Router();

const validateSignup = [
  check('email')
    .exists({ checkFalsy: true })
    .isEmail()
    .withMessage('Invalid email'),


  check('username')
    .exists({ checkFalsy: true })
    .isLength({ min: 4 })
    .withMessage('Username is required'),


  check('username')
    .not()
    .isEmail()
    .withMessage('Username cannot be an email'),


    check('password')
    .exists({ checkFalsy: true })
    .isLength({ min: 6 })
    .withMessage('Password must be 6 characters or more'),

    check('firstName')
    .isLength({ min: 2 })
    .withMessage('First Name is required'),

    check('lastName')

    .isLength({ min: 2 })
    .withMessage('Last Name is required'),


    handleValidationErrors
  ];



  // if(!firstName.length) throw new Error('First Name is required')
  //   if(!lastName.length) throw new Error('Last Name is required')
  //     if(!username.length) throw new Error('Username is required')

// Sign up
router.post(
    '/',
    validateSignup,
    async (req, res) => {






      // {
      //   "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
      //   "errors": {
      //     "email": "Invalid email",
      //     "username": "Username is required",
      //     "firstName": "First Name is required",
      //     "lastName": "Last Name is required"
      //   }
      // }

      const { email, password, username, firstName, lastName } = req.body;
      if(!password.length) throw new Error('Password must be between 4 and 60 chars.')
      const hashedPassword = bcrypt.hashSync(password);
      const user = await User.create({ email, username, hashedPassword, firstName, lastName });


      const safeUser = {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        username: user.username,
      };

      await setTokenCookie(res, safeUser);




      return res.status(201).json({
        user: safeUser
      });



    }
  );

module.exports = router;
